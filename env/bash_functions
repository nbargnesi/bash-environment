# Copyright Â© 2011-2017 Nick Bargnesi <nick@den-4.com>.  All rights reserved.
#
# bash-environment is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# bash-environment is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with bash-environment.  If not, see <http://www.gnu.org/licenses/>.
#
# bash functions
#
# Sort Order
#     Colors
#     Exports
#  -->Functions
#     Aliases
#     Bindings
#

# Return 1 if $1 is not found by which, 0 otherwise.
_need_cmd() {
    if [ $# -ne 1 ]; then
        echo "_need_cmd $# -ne 1" >&2
        return
    fi
    if ! which $1 >&/dev/null; then
        return 1
    fi
    return 0
}

# Use a faster CPU frequency governor
faster-cpus() {
    # Current governor for CPU 0
    CUR_GOV=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
    if [ -z "$CUR_GOV" ]; then
        echo 'Failed to get current frequency governor.'
        return
    fi
    case "$CUR_GOV" in
        "powersave")
        NEXT_GOV="userspace"
        MSG="Slow -> Userspace"
        ;;
        "userspace")
        NEXT_GOV="conservative"
        MSG="Userspace -> Conservative"
        ;;
        "conservative")
        NEXT_GOV="ondemand"
        MSG="Conservative -> On-Demand"
        ;;
        "ondemand")
        NEXT_GOV="performance"
        MSG="On-Demand -> Fast"
        ;;
        "performance")
        echo "Maximum CPU frequency reached (performance governor)."
        return
        ;;
        *)
        echo "Unhandled governor: $CUR_GOV."
        ;;
    esac
    let -i CPUS=$(hw_num_cpus)
    let -i i=0
    while [ $i -lt $CPUS ]; do
        if ! sudo cpufreq-set -c $i -g "$NEXT_GOV" >/dev/null; then
            echo "Failed to set frequency governor ($NEXT_GOV) on CPU $i."
            return
        fi
        let i=$i+1
    done
    echo "$MSG"
}

# Use a slower CPU frequency governor
slower-cpus() {
    # Current governor for CPU 0
    CUR_GOV=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
    if [ -z "$CUR_GOV" ]; then
        echo 'Failed to get current frequency governor.'
        return
    fi
    case "$CUR_GOV" in
        "performance")
        NEXT_GOV="ondemand"
        MSG="Performance -> On-Demand"
        ;;
        "ondemand")
        NEXT_GOV="conservative"
        MSG="On-Demand -> Conservative"
        ;;
        "conservative")
        NEXT_GOV="userspace"
        MSG="Conservative -> Userspace"
        ;;
        "userspace")
        NEXT_GOV="powersave"
        MSG="Userspace -> Slow"
        ;;
        "powersave")
        echo "Minimum CPU frequency reached (powersave governor)."
        return
        ;;
        *)
        echo "Unhandled governor: $CUR_GOV."
        ;;
    esac
    let -i CPUS=$(hw_num_cpus)
    let -i i=0
    while [ $i -lt $CPUS ]; do
        if ! sudo cpufreq-set -c $i -g "$NEXT_GOV" >/dev/null; then
            echo "Failed to set frequency governor ($NEXT_GOV) on CPU $i."
            return
        fi
        let i=$i+1
    done
    echo "$MSG"
}

# Push new directories onto the stack.
function push-cd() {
    if [ "$1" ]; then
        pushd "$1" >/dev/null
    else
        pushd  $HOME >/dev/null
    fi
}

function pop-cd() {
    if [ "$(dirs -v | wc -l)" -eq 1 ]; then
        echo 'pop-cd: no previous directory'
        return
    fi
    popd
}

function recursively-remove-directories() {
    dirs=$(find . -mindepth 1 -type d | wc -l)
    find . -mindepth 1 -type d
    echo
    echo -en "If you answer yes, the above ${dirs} directories will be "
    echo -en "removed!\n"
    echo
    echo -en "Are you sure? "
    read REPLY
    if [ "${REPLY}" == "yes" ]; then
        echo -en "[ENTER] when ready."
        read
        find . -mindepth 1 -type d -print0 | xargs -0 rm -fr
    fi
}

function go-to-warp() {
    _need_cmd sox
    if [ $? -ne 0 ]; then
        echo "Warp drive only available with Sox."
        echo "Get it here: http://sox.sourceforge.net"
        return 1
    fi
    echo "Engaging warp drive."
    play -n -c1 synth whitenoise \
        lowpass -1 120 \
        lowpass -1 120 \
        lowpass -1 120 \
        gain +14 >/dev/null 2>&1
   echo "Dropping out of warp."
}

function find-exts() {
    if [ -z "$1" ]; then
        echo "Usage: find-exts [EXTENSION]..."
        echo
        echo "Recursively finds all files ending with the provided extensions"
        echo "starting from the current working directory."
        return
    fi
    for ext in $@; do
        find . -name "*.${ext}" -type f
    done
}

function remove-exts() {
    if [ -z "$1" ]; then
        echo "Usage: remove-exts [EXTENSION]..."
        echo
        echo "Recursively removes all files ending with the provided extensions"
        echo "starting from the current working directory."
        return
    fi
    for ext in $@; do
        find . -name "*.${ext}" -type f -print0 | xargs -0 rm
    done
}

function come-here() {
    if [ $# -ne 2 ]; then
        echo "Usage: come-here HOST PORT"
        echo
        echo "Brings the PORT on HOST here."
        return
    fi
    echo "Making magic happen, [CTRL-C] when you're done with me."
    HOST=$1
    PORT=$2
    ssh $HOST -nN -L $PORT:localhost:$PORT
}

function most-recent() {
    ls -lt | head -n 10
}

# Support for ad hoc versioning of directories
function local-git-dir() {
    if [ -z "${ENV_REPOS_PATH}" ]; then
        echo "ENV_REPOS_PATH has not been set."
        echo "--"
        echo "Set this to a directory where I can store your git repositories."
        return 1
    fi
    local REPO_PATH="$ENV_REPOS_PATH"
    REPO_PATH+="/$(pwd | sha256sum | awk '{ print $1 }')"
    echo "$REPO_PATH"
}

function local-git-init() {
    if [ -z "${ENV_REPOS_PATH}" ]; then
        echo "ENV_REPOS_PATH has not been set."
        echo "--"
        echo "Set this to a directory where I can store your git repositories."
        return 1
    fi
    local GIT_DIR="$(local-git-dir)"
    git init --separate-git-dir=${GIT_DIR}
}

function local-git-destroy() {
    if [ -z "${ENV_REPOS_PATH}" ]; then
        echo "ENV_REPOS_PATH has not been set."
        echo "--"
        echo "Set this to a directory where I can store your git repositories."
        return 1
    fi
    local GIT_DIR="$(local-git-dir)"
    if [ ! -d "$GIT_DIR" ]; then
        echo "No git repository at: $GIT_DIR"
        return 1
    fi
    local DOTGIT_FILE="$(git rev-parse --show-toplevel)/.git" || return 1
    echo
    echo "If you answer yes, the following will be removed!"
    echo -e "\t$GIT_DIR"
    echo -e "\t$DOTGIT_FILE"
    echo
    echo -en "Are you sure? "
    read REPLY
    if [ "${REPLY}" == "yes" ]; then
        echo -en "[ENTER] when ready."
        read
        rm "$DOTGIT_FILE" || return 1
        rm -fr "$GIT_DIR" || return 1
    fi
}

function tag-temp() {
    _need_cmd tmsu
    if [ $? -eq 1 ]; then
        echo "tmsu has not been found"
        echo "--"
        echo "I use tmsu to tag things as temporary."
    fi
    tmsu tag --tags temporary $@
}

function untag-temp() {
    _need_cmd tmsu
    if [ $? -eq 1 ]; then
        echo "tmsu has not been found"
        echo "--"
        echo "I use tmsu to tag things as temporary."
    fi
    tmsu untag --tags temporary $@
}

function purge-temp() {
    _need_cmd tmsu
    if [ $? -eq 1 ]; then
        echo "tmsu has not been found"
        echo "--"
        echo "I use tmsu to tag things as temporary."
    fi
    FILES=$(tmsu files --explicit temporary)
    if [ -z "${FILES}" ]; then
        echo "Nothing temporary!"
        return
    fi
    echo ${FILES}
    echo -en "Ready to remove, [CTRL-C] to cancel."
    read
    rm -frv ${FILES}
    tmsu untag --tags temporary ${FILES}
}

function show-temp() {
    _need_cmd tmsu
    if [ $? -eq 1 ]; then
        echo "tmsu has not been found"
        echo "--"
        echo "I use tmsu to tag things as temporary."
    fi
    FILES=$(tmsu files --explicit temporary)
    if [ -z "${FILES}" ]; then
        echo "Nothing temporary!"
        return
    fi
    echo "${FILES}"
}

function remove-this-directory() {
    pwd
    echo -en "Ready to remove this directory, [CTRL-C] to cancel."
    read
    rm -fr $(pwd)
    cd ..
}

# lc: last command
#
# Without arguments, executes the last command similar to !!. With arguments,
# executes the arguments with command substitution for !!.
#
# E.g., the following finds one or more files named some_file.txt:
#   find -name some_file.txt
# Using "lc vim" would execute "vim $(find -name some_file.txt)".
#
function lc() {
    local PREV_CMD=$(history | tail -n 2 | head -n1 | awk '{ $1=""; print }')
    local PREV_CMD=$(echo $PREV_CMD | sed -e 's/^[ \t]*//')
    if [ $# -eq 0 ]; then
        echo "Executing: \"$PREV_CMD\"..."
        $PREV_CMD
        return $?
    fi
    $@ $($PREV_CMD)
}

# lcs: last command (substitution variant)
#
# Without arguments, executes the last command similar to !!. With two
# arguments, executes the arguments with string substitution for !!.
#
# E.g., the following finds one or more files named some_file.txt:
#   find -name some_file.txt
# Using "lcs txt zip" would execute "find -name some_file.zip".
#
function lcs() {
    local PREV_CMD=$(fc -lnr -2 -2 | sed -e 's/^[[:space:]]*//')
    if [ $# -eq 0 ]; then
        echo "Executing: \"$PREV_CMD\"..."
        $PREV_CMD
        return $?
    elif [ $# -ne 2 ]; then
        echo "Usage: lcs STRING1 STRING2"
        echo
        echo "Runs the last command substituting STRING2 for STRING1."
        return
    fi
    PREV_CMD=$(echo $PREV_CMD | sed -e "s/$1/$2/g")
    $PREV_CMD
}

# Without arguments, shows the diffs from commit to commit for the entire
# working tree. With arguments, shows the diffs from commit to commit for the
# paths specified.
#
# E.g., the following diffs some_file.txt since it was first committed:
#   git-through-time some_file.txt
#
function git-through-time() {
    FIRST=$(git rev-list HEAD --reverse | head -n 1)
    LAST=$(git rev-list HEAD | head -n 1)
    git log -u ${FIRST}..${LAST} $@
}

# Comma-join; echoes the arguments joined by ','.
# E.g.,
#     cjoin "foo" "bar"
# Echoes:
#     "foo,bar"
function cjoin {
    local IFS=","
    echo "$*"
}

# Tab-join; echoes the arguments joined by '	'.
# E.g.,
#     tjoin "foo" "bar"
# Echoes:
#     "foo	bar'
function tjoin {
    local IFS="	"
    echo "$*"
}

# Take recursive ownership, via sudo, of one or more directories.
# E.g.,
#     own /path/to/dir
function own {
    if [ $# -eq 0 ]; then
        echo "$FUNCNAME: DIR..."
        return
    fi
    local ID=$(id -u)
    local GROUP=$(id -g)
    sudo chown -R $ID:$GROUP $@
}

# Use pwgen to generate n characters.
# E.g.,
#     rndchars 8
function rndchars {
    _need_cmd pwgen
    # if non-zero, exec to show command not found and return
    if [ $? -ne 0 ]; then pwgen; return; fi
    if [ $# -ne 1 ]; then
        echo "Usage: rndchars <number of characters>"
        echo
        echo "Prints some number of characters."
        return 1
    fi
    echo $(pwgen -A0 $1 1)
    return 0
}

# Add * to the .gitignore of each directory argument. Skips arguments that are
# not directories.
# E.g., ignore files in build/:
#     git-ignore-dir-entries build
function git-ignore-dir-entries {
    local ignore="$(echo -e '*\n!.gitignore')"
    while (("$#")); do
        if [ ! -d "$1" ]; then
            shift
            continue
        fi
        echo "$ignore" >> "$1"/.gitignore
        shift
    done
}

# Add each argument to the .gitignore of the directory that contains it. Skips
# arguments that are not regular files.
# E.g., ignore the file build/a.out:
#     git-ignore-dir-file build/a.out
function git-ignore-file {
    while (("$#")); do
        if [ ! -f "$1" ]; then
            shift
            continue
        fi
        base="$(basename "$1")"
        dir="$(dirname "$1")"
        echo "$base" >> "$dir"/.gitignore
        shift
    done
}

# Add each argument to the .gitignore of the directory that contains it. Skips
# arguments that are not directories.
# E.g., ignore the build directory:
#     git-ignore-dir build
function git-ignore-dir {
    while (("$#")); do
        if [ ! -d "$1" ]; then
            shift
            continue
        fi
        base="$(basename "$1")"
        dir="$(dirname "$1")"
        echo "$base" >> "$dir"/.gitignore
        shift
    done
}

# Add each argument to the .gitignore of the directory that contains it.
# E.g., ignore the build directory and the output directory a.out file:
#     git-ignore build output/a.out
function git-ignore {
    while (("$#")); do
        base="$(basename "$1")"
        dir="$(dirname "$1")"
        echo "$base" >> "$dir"/.gitignore
        shift
    done
}

# Set upstream tracking branch to the remote argument.
# E.g., to track origin:
#     git-track origin
function git-track {
    local branch="$(git rev-parse --abbrev-ref HEAD)"
    if [ $# -ne 1 ]; then
        echo "Usage: git-track REMOTE"
        echo
        echo "Tracks the current branch ($branch) on the remote."
        return
    fi
    git branch --set-upstream-to="$1"/"$branch" "$branch"
}
